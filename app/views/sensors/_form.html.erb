   <%= form_for @sensor do |f| %>

        <% if @sensor.errors.any? %>
            <div id="error_explanation">
              <h2><%= pluralize(@sensor.errors.count, "error") + " " + (I18n.t :notsaved )%></h2>
              <ul>
                  <% @sensor.errors.full_messages.each do |message| %>
                    <li><%= message %></li>
                  <% end %>
              </ul>
            </div>
        <% end %>


        <div class="row">
            <div class="col-md-6">
                <div class="panel-body ueberschrift">
                    <h1><%= @sensor.mobject.name %></h1> 
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel-body ueberschrift">
                    <div class="form-group" style="text-align:center">
                      <div class="circle" id="cbox">aaaa</div>
                    </div>
                    <div class="form-group">
                       <%= f.label I18n.t :value %><br>
                       <%= f.text_field :svalue, class:"form-control" %>

                      <div class="price-slider">
                        <h4 class="great rot">Rot</h4>
                        <div class="col-sm-12">
                         <div id="slider"></div>
                        </div>
                      </div>
                      <div class="price-slider">
                        <h4 class="great gruen">Grün</h4>
                        <div class="col-sm-12">
                          <div id="slider2"></div>
                        </div>
                      </div>
                      <div class="price-slider">
                        <h4 class="great blau">Blau</h4>
                        <div class="col-sm-12">
                          <div id="slider3"></div>
                        </div>
                      </div>
                  </div>
                  <div class="form-group">
                    <div class="col-sm-12">
                      <button type="submit" class="btn btn-submit btn-lg" id="but">Speichern<span class="glyphicon glyphicon-chevron-right pull-right" style="padding-right: 10px;"></span></button>
                      <%= link_to mobject_path(:id => @sensor.mobject_id, :topic => "objekte_sensordaten") do %>
                        <i class="btn btn-default btn-lg btn-submit">Abbrechen</i>
                      <% end %>
                    </div>
                  </div>
                </div>
            </div>
       </div>
       <%= f.hidden_field :mobject_id, class:"form-control" %>
       <%= f.hidden_field :svalue, :id => "svalue", class:"form-control" %>
       <%= f.hidden_field :bvalue, class:"form-control" %>
       <%= f.hidden_field :value, class:"form-control" %>
  <% end %>
<script src="http://code.jquery.com/jquery.min.js"></script>
<script src="https://code.jquery.com/ui/1.10.4/jquery-ui.min.js"></script>
<% if false %>
<% end %>
<script>
$(document).ready(function() {
          $("#slider").slider({
              animate: true,
              value:0,
              min: 0,
              max: 255,
              step: 1,
              slide: function(event, ui) {
                  update(1,ui.value); //changed
              }
          });

          $("#slider2").slider({
              animate: true,
              value:0,
              min: 0,
              max: 255,
              step: 1,
              slide: function(event, ui) {
                  update(2,ui.value); //changed
              }
          });

          $("#slider3").slider({
              animate: true,
              value:0,
              min: 0,
              max: 255,
              step: 1,
              slide: function(event, ui) {
                  update(3,ui.value); //changed
              }
          });

          //Added, set initial value.
          $("#rot").val(0);
          $("#gruen").val(0);
          $("#blau").val(0);
          $("#amount-label").text(0);
          $("#duration-label").text(0);
          
          update();
      });

      //changed. now with parameter
      function update(slider,val) {
        //changed. Now, directly take value from ui.value. if not set (initial, will use current value.)
        /* var $rot = slider == 1?val:$("#rot").val();
        var $gruen = slider == 2?val:$("#gruen").val();
        var $blau = slider == 3?val:$("#blau").val(); */


        var $rot = $( "#slider" ).slider( "value" );
        var $gruen = $( "#slider2" ).slider( "value" );
        var $blau = $( "#slider3" ).slider( "value" );
        var c = rgb($rot,$gruen,$blau)
        
        var $hrot = $rot.toString(16);
        var $hgruen = $gruen.toString(16);
        var $hblau = $blau.toString(16);
        
        //alert($hrot.length);
        if (true) {
        
        if ($hrot.length == 1) {
          $hrot = "0"+$hrot;
        }
        if ($hgruen.length == 1) {
          $hgruen = "0"+$hgruen;
        }
        if ($hblau.length == 1) {
          $hblau = "0"+$hblau;
        }
      	$("#svalue").val("#"+$hrot+$hgruen+$hblau);
      	$("#sensor_svalue").val("#"+$hrot+$hgruen+$hblau);
        }


        $("#cbox").text(c);
        $("#cbox").css("background-color",c);
        //$("#but").css("background-color",c);

         $('#slider a').html('<label><span class="glyphicon glyphicon-chevron-left"></span> '+$rot+' <span class="glyphicon glyphicon-chevron-right"></span></label>');
         $('#slider2 a').html('<label><span class="glyphicon glyphicon-chevron-left"></span> '+$gruen+' <span class="glyphicon glyphicon-chevron-right"></span></label>');
         $('#slider3 a').html('<label><span class="glyphicon glyphicon-chevron-left"></span> '+$blau+' <span class="glyphicon glyphicon-chevron-right"></span></label>');
      }
      function rgb(r, g, b){
        return "rgb("+r+","+g+","+b+")";
      }
</script>

    <script>
        /*!
 * jQuery UI Touch Punch 0.2.3
 *
 * Copyright 2011–2014, Dave Furfero
 * Dual licensed under the MIT or GPL Version 2 licenses.
 *
 * Depends:
 *  jquery.ui.widget.js
 *  jquery.ui.mouse.js
 */
(function ($) {

  // Detect touch support
  $.support.touch = 'ontouchend' in document;

  // Ignore browsers without touch support
  if (!$.support.touch) {
    return;
  }

  var mouseProto = $.ui.mouse.prototype,
      _mouseInit = mouseProto._mouseInit,
      _mouseDestroy = mouseProto._mouseDestroy,
      touchHandled;

  /**
   * Simulate a mouse event based on a corresponding touch event
   * @param {Object} event A touch event
   * @param {String} simulatedType The corresponding mouse event
   */
  function simulateMouseEvent (event, simulatedType) {

    // Ignore multi-touch events
    if (event.originalEvent.touches.length > 1) {
      return;
    }

    event.preventDefault();

    var touch = event.originalEvent.changedTouches[0],
        simulatedEvent = document.createEvent('MouseEvents');
    
    // Initialize the simulated mouse event using the touch event's coordinates
    simulatedEvent.initMouseEvent(
      simulatedType,    // type
      true,             // bubbles                    
      true,             // cancelable                 
      window,           // view                       
      1,                // detail                     
      touch.screenX,    // screenX                    
      touch.screenY,    // screenY                    
      touch.clientX,    // clientX                    
      touch.clientY,    // clientY                    
      false,            // ctrlKey                    
      false,            // altKey                     
      false,            // shiftKey                   
      false,            // metaKey                    
      0,                // button                     
      null              // relatedTarget              
    );

    // Dispatch the simulated event to the target element
    event.target.dispatchEvent(simulatedEvent);
  }

  /**
   * Handle the jQuery UI widget's touchstart events
   * @param {Object} event The widget element's touchstart event
   */
  mouseProto._touchStart = function (event) {

    var self = this;

    // Ignore the event if another widget is already being handled
    if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
      return;
    }

    // Set the flag to prevent other widgets from inheriting the touch event
    touchHandled = true;

    // Track movement to determine if interaction was a click
    self._touchMoved = false;

    // Simulate the mouseover event
    simulateMouseEvent(event, 'mouseover');

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');

    // Simulate the mousedown event
    simulateMouseEvent(event, 'mousedown');
  };

  /**
   * Handle the jQuery UI widget's touchmove events
   * @param {Object} event The document's touchmove event
   */
  mouseProto._touchMove = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Interaction was not a click
    this._touchMoved = true;

    // Simulate the mousemove event
    simulateMouseEvent(event, 'mousemove');
  };

  /**
   * Handle the jQuery UI widget's touchend events
   * @param {Object} event The document's touchend event
   */
  mouseProto._touchEnd = function (event) {

    // Ignore event if not handled
    if (!touchHandled) {
      return;
    }

    // Simulate the mouseup event
    simulateMouseEvent(event, 'mouseup');

    // Simulate the mouseout event
    simulateMouseEvent(event, 'mouseout');

    // If the touch interaction did not move, it should trigger a click
    if (!this._touchMoved) {

      // Simulate the click event
      simulateMouseEvent(event, 'click');
    }

    // Unset the flag to allow other widgets to inherit the touch event
    touchHandled = false;
  };

  /**
   * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
   * This method extends the widget with bound touch event handlers that
   * translate touch events to mouse events and pass them to the widget's
   * original mouse event handling methods.
   */
  mouseProto._mouseInit = function () {
    
    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element.bind({
      touchstart: $.proxy(self, '_touchStart'),
      touchmove: $.proxy(self, '_touchMove'),
      touchend: $.proxy(self, '_touchEnd')
    });

    // Call the original $.ui.mouse init method
    _mouseInit.call(self);
  };

  /**
   * Remove the touch event handlers
   */
  mouseProto._mouseDestroy = function () {
    
    var self = this;

    // Delegate the touch handlers to the widget's element
    self.element.unbind({
      touchstart: $.proxy(self, '_touchStart'),
      touchmove: $.proxy(self, '_touchMove'),
      touchend: $.proxy(self, '_touchEnd')
    });

    // Call the original $.ui.mouse destroy method
    _mouseDestroy.call(self);
  };

})(jQuery);
        
    </script>
    
<script>
  document.addEventListener("turbolinks:load", function() {ready()})
</script>
